# -*- coding: utf-8 -*-
"""DATA STRUCTURE IV.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ud3ytpmfAuF5Io4RKPlVgDQ-6w4RQ5PI

IMPELEMENTASI QUEUE DENGAN LIST
"""

class QueueList:
  def __init__(self):
    self.queue = []

  def enqueue (self, item):
    self.queue.append(item)

  def dequeue(self):
    if not self.is_empty():
      return self.queue.pop(0)

  def front(self):
    return self.queue[0] if not self.is_empty() else None

  def rear(self):
    return self.queue[-1] if not self.is_empty() else None

  def is_empty(self):
    return len(self.queue) == 0

  def size(self):
    return len(self.queue)

# Contoh pengunaan
queue = QueueList()
queue.enqueue (10)
queue.enqueue (20)
queue.enqueue (30)
print("Queue setelah enqueue :", queue.queue)
print("Dequeued element :", queue.dequeue())
print("Front element :", queue.front())
print("Rear elemnt :", queue.rear())
print("Queue size :", queue.size())

from collections import deque

class QueueDeque:
  def __init__(self):
    self.queue = deque()

  def enqueue (self, item):
    self.queue.append(item)

  def dequeue(self):
      return self.queue.popleft() if not self.is_empty() else None

  def front(self):
    return self.queue[0] if not self.is_empty() else None

  def rear(self):
    return self.queue[-1] if not self.is_empty() else None

  def is_empty(self):
    return len(self.queue) == 0

  def size(self):
    return len(self.queue)

# Contoh pengunaan
queue = QueueDeque()
queue.enqueue (10)
queue.enqueue (20)
queue.enqueue (30)
print("Queue setelah enqueue :", list(queue.queue))
print("Dequeued element :", queue.dequeue())
print("Front element :", queue.front())
print("Rear elemnt :", queue.rear())
print("Queue size :", queue.size())

from queue import Queue

queue = Queue()

queue.put(10)
queue.put(20)
queue.put(30)

print("Queue Size :", queue.qsize())
print("Dequeued Element :", queue.get())
print("Queue size setelah dequeue :", queue.qsize())

class Node:
  def __init__(self, data):
    self.data = data
    self.next = None

class QueueLinkedList:
  def __init__(self):
    self.front = self.rear = None

  def enqueue(self, data):
    new_node = Node(data)
    if self.rear is None :
      self.front = self.rear = new_node
      return

    self.rear.next = new_node
    self.rear = new_node

  def dequeue(self):
    if self.front is None:
      return None
    dequeue_element = self.front.data
    self.front = self.front.next
    if self.front is None:
      self.rear = None
    return dequeue_element

  def front_element(self):
    return self.front is None

  def front_element(self):
    return self.front.data if self.front else None

  def rear_element(self):
    return self.rear.data if self.rear else None

queue = QueueLinkedList()
queue.enqueue (10)
queue.enqueue (20)
queue.enqueue (30)
print("Dequeued Element : ", queue.dequeue())
print("Front Element : ", queue.front_element())
print("Rear Element : ", queue.rear_element())

"""SOAL LATIHAN"""

class Queue:
    def __init__(self, capacity=10):
        self.capacity = capacity
        self.queue = []

    def enqueue(self, ticket_id):
        if self.size() < self.capacity:
            self.queue.append(ticket_id)
            print(f"Pelanggan {ticket_id} telah ditambahkan ke dalam antrian.")
        else:
            print("Antrian penuh! Silakan tunggu hingga ada slot kosong.")

    def dequeue(self):
        if not self.is_empty():
            served_customer = self.queue.pop(0)
            print(f"Pelanggan {served_customer} telah dilayani.")
            return served_customer
        else:
            print("Antrian kosong! Tidak ada pelanggan yang dapat dilayani.")
            return None

    def front(self):
        if not self.is_empty():
            return self.queue[0]
        else:
            return None

    def rear(self):
        if not self.is_empty():
            return self.queue[-1]
        else:
            return None

    def is_empty(self):
        return len(self.queue) == 0

    def size(self):
        return len(self.queue)

class CinemaTicketQueue:
    def __init__(self):
        self.queue = Queue()

    def add_customer(self, ticket_id):
        if '7' in ticket_id:  # Cek apakah pelanggan adalah VIP
            print(f"Pelanggan VIP {ticket_id} langsung mendapatkan kursi.")
        else:
            self.queue.enqueue(ticket_id)

    def serve_customer(self):
        if not self.queue.is_empty():
            return self.queue.dequeue()
        else:
            print("Tidak ada pelanggan yang dapat dilayani.")
            return None

    def show_front(self):
        front_customer = self.queue.front()
        if front_customer:
            print(f"Pelanggan di depan antrian: {front_customer}")
        else:
            print("Antrian kosong.")

    def show_rear(self):
        rear_customer = self.queue.rear()
        if rear_customer:
            print(f"Pelanggan di belakang antrian: {rear_customer}")
        else:
            print("Antrian kosong.")

    def check_queue_status(self):
        if self.queue.is_empty():
            print("Antrian kosong.")
        else:
            print(f"Jumlah pelanggan dalam antrian: {self.queue.size()}")

# Contoh penggunaan
cinema_queue = CinemaTicketQueue()

# Menambahkan pelanggan
cinema_queue.add_customer("JA01")
cinema_queue.add_customer("JA02")
cinema_queue.add_customer("JA07")  # VIP
cinema_queue.add_customer("JA03")
cinema_queue.add_customer("JA04")
cinema_queue.add_customer("JA05")
cinema_queue.add_customer("JA06")
cinema_queue.add_customer("JA08")
cinema_queue.add_customer("JA09")
cinema_queue.add_customer("JA10")
cinema_queue.add_customer("JA11")  # Antrian penuh

# Menampilkan status antrian
cinema_queue.check_queue_status()
cinema_queue.show_front()
cinema_queue.show_rear()

# Melayani pelanggan
cinema_queue.serve_customer()
cinema_queue.serve_customer()

# Menampilkan status antrian setelah melayani
cinema_queue.check_queue_status()
cinema_queue.show_front()
cinema_queue.show_rear()

class Queue:
    def __init__(self):
        self.queue = []

    def enqueue(self, order_id, num_pages):
        self.queue.append((order_id, num_pages))
        print(f"Pesanan {order_id} dengan {num_pages} halaman telah ditambahkan ke dalam antrian.")

    def dequeue(self):
        if not self.is_empty():
            served_order = self.queue.pop(0)
            print(f"Pesanan {served_order[0]} telah dilayani.")
            return served_order
        else:
            print("Antrian kosong! Tidak ada pesanan yang dapat dilayani.")
            return None

    def front(self):
        if not self.is_empty():
            return self.queue[0]
        else:
            return None

    def rear(self):
        if not self.is_empty():
            return self.queue[-1]
        else:
            return None

    def is_empty(self):
        return len(self.queue) == 0

    def size(self):
        return len(self.queue)

class CopyServiceQueue:
    def __init__(self):
        self.queue = Queue()

    def add_order(self, order_id, num_pages):
        if num_pages < 10:  # Fast Track
            print(f"Pesanan {order_id} dengan {num_pages} halaman diproses secara langsung (Fast Track).")
        elif num_pages > 100:  # Proses dalam dua tahap
            print(f"Pesanan {order_id} dengan {num_pages} halaman akan diproses dalam dua tahap.")
            self.queue.enqueue(order_id, 100)  # Proses tahap pertama
            self.queue.enqueue(order_id, num_pages - 100)  # Proses tahap kedua
        else:
            self.queue.enqueue(order_id, num_pages)

    def serve_order(self):
        if not self.queue.is_empty():
            return self.queue.dequeue()
        else:
            print("Tidak ada pesanan yang dapat dilayani.")
            return None

    def show_front(self):
        front_order = self.queue.front()
        if front_order:
            print(f"Pesanan di depan antrian: {front_order[0]} dengan {front_order[1]} halaman.")
        else:
            print("Antrian kosong.")

    def show_rear(self):
        rear_order = self.queue.rear()
        if rear_order:
            print(f"Pesanan di belakang antrian: {rear_order[0]} dengan {rear_order[1]} halaman.")
        else:
            print("Antrian kosong.")

    def check_queue_status(self):
        if self.queue.is_empty():
            print("Antrian kosong.")
        else:
            print(f"Jumlah pesanan dalam antrian: {self.queue.size()}")

# Contoh penggunaan
copy_service_queue = CopyServiceQueue()

# Menambahkan pesanan
copy_service_queue.add_order("JAB74", 5)   # Fast Track
copy_service_queue.add_order("JAB74", 15)
copy_service_queue.add_order("JAB74", 120)  # Proses dalam dua tahap
copy_service_queue.add_order("JAB74", 8)   # Fast Track
copy_service_queue.add_order("JAB74", 50)

# Menampilkan status antrian
copy_service_queue.check_queue_status()
copy_service_queue.show_front()
copy_service_queue.show_rear()

# Melayani pesanan
copy_service_queue.serve_order()
copy_service_queue.serve_order()

# Menampilkan status antrian setelah melayani
copy_service_queue.check_queue_status()
copy_service_queue.show_front()
copy_service_queue.show_rear()

class Queue:
    def __init__(self):
        self.queue = []

    def enqueue(self, vehicle_number):
        self.queue.append(vehicle_number)
        print(f"Kendaraan {vehicle_number} telah ditambahkan ke dalam antrian parkir.")

    def dequeue(self):
        if not self.is_empty():
            served_vehicle = self.queue.pop(0)
            print(f"Kendaraan {served_vehicle} telah keluar dari parkir.")
            return served_vehicle
        else:
            print("Antrian kosong! Tidak ada kendaraan yang dapat keluar.")
            return None

    def front(self):
        if not self.is_empty():
            return self.queue[0]
        else:
            return None

    def rear(self):
        if not self.is_empty():
            return self.queue[-1]
        else:
            return None

    def is_empty(self):
        return len(self.queue) == 0

    def size(self):
        return len(self.queue)

class ParkingQueue:
    def __init__(self, capacity=15):
        self.queue = Queue()
        self.capacity = capacity

    def add_vehicle(self, vehicle_number, is_environmentally_friendly=False):
        if self.queue.size() >= self.capacity:
            print("Parkiran penuh! Kendaraan baru harus menunggu hingga ada kendaraan yang keluar.")
            return

        if is_environmentally_friendly:
            print(f"Kendaraan ramah lingkungan {vehicle_number} mendapatkan prioritas masuk parkiran.")
            self.queue.enqueue(vehicle_number)
        else:
            self.queue.enqueue(vehicle_number)

    def remove_vehicle(self):
        return self.queue.dequeue()

    def show_front(self):
        front_vehicle = self.queue.front()
        if front_vehicle:
            print(f"Kendaraan di depan antrian: {front_vehicle}.")
        else:
            print("Antrian kosong.")

    def show_rear(self):
        rear_vehicle = self.queue.rear()
        if rear_vehicle:
            print(f"Kendaraan di belakang antrian: {rear_vehicle}.")
        else:
            print("Antrian kosong.")

    def check_parking_status(self):
        if self.queue.is_empty():
            print("Parkiran kosong.")
        else:
            print(f"Jumlah kendaraan dalam antrian: {self.queue.size()}")

# Contoh penggunaan
parking_queue = ParkingQueue()

# Menambahkan kendaraan
parking_queue.add_vehicle("PO74", is_environmentally_friendly=True)  # Kendaraan ramah lingkungan
parking_queue.add_vehicle("PO75")
parking_queue.add_vehicle("PO76")
parking_queue.add_vehicle("PO77")
parking_queue.add_vehicle("PO78")
parking_queue.add_vehicle("PO79")
parking_queue.add_vehicle("PO80")
parking_queue.add_vehicle("PO81")
parking_queue.add_vehicle("PO82")
parking_queue.add_vehicle("PO83")
parking_queue.add_vehicle("PO84")
parking_queue.add_vehicle("PO85")
parking_queue.add_vehicle("PO86")
parking_queue.add_vehicle("PO87")
parking_queue.add_vehicle("PO88")
parking_queue.add_vehicle("PO89")  # Parkiran penuh
parking_queue.add_vehicle("PO90")  # Kendaraan baru harus menunggu

# Menampilkan status parkiran
parking_queue.check_parking_status()
parking_queue.show_front()
parking_queue.show_rear()

# Mengeluarkan kendaraan
parking_queue.remove_vehicle()
parking_queue.remove_vehicle()

# Menampilkan status parkiran setelah mengeluarkan kendaraan
parking_queue.check_parking_status()
parking_queue.show_front()
parking_queue.show_rear()

class Queue:
    def __init__(self):
        self.queue = []

    def enqueue(self, student_id):
        self.queue.append(student_id)
        print(f"Mahasiswa {student_id} telah ditambahkan ke dalam antrian pengambilan sertifikat.")

    def dequeue(self):
        if not self.is_empty():
            served_student = self.queue.pop(0)
            print(f"Mahasiswa {served_student} telah dilayani.")
            return served_student
        else:
            print("Antrian kosong! Tidak ada mahasiswa yang dapat dilayani.")
            return None

    def front(self):
        if not self.is_empty():
            return self.queue[0]
        else:
            return None

    def rear(self):
        if not self.is_empty():
            return self.queue[-1]
        else:
            return None

    def is_empty(self):
        return len(self.queue) == 0

    def size(self):
        return len(self.queue)

class CertificateQueue:
    def __init__(self):
        self.regular_queue = Queue()
        self.achievement_queue = Queue()

    def add_student(self, student_id, has_achievements=False):
        if has_achievements:
            print(f"Mahasiswa {student_id} berprestasi, langsung mengambil sertifikat.")
            self.achievement_queue.enqueue(student_id)
        else:
            if self.regular_queue.size() + self.achievement_queue.size() >= 20:
                print("Antrian penuh! Mahasiswa baru harus menunggu hingga ada mahasiswa yang dilayani.")
            else:
                self.regular_queue.enqueue(student_id)

    def serve_student(self):
        if not self.achievement_queue.is_empty():
            return self.achievement_queue.dequeue()
        elif not self.regular_queue.is_empty():
            return self.regular_queue.dequeue()
        else:
            print("Tidak ada mahasiswa yang dapat dilayani.")
            return None

    def show_front(self):
        if not self.achievement_queue.is_empty():
            front_student = self.achievement_queue.front()
            print(f"Mahasiswa di depan jalur berprestasi: {front_student}.")
        elif not self.regular_queue.is_empty():
            front_student = self.regular_queue.front()
            print(f"Mahasiswa di depan jalur reguler: {front_student}.")
        else:
            print("Antrian kosong.")

    def show_rear(self):
        if not self.achievement_queue.is_empty():
            rear_student = self.achievement_queue.rear()
            print(f"Mahasiswa di belakang jalur berprestasi: {rear_student}.")
        elif not self.regular_queue.is_empty():
            rear_student = self.regular_queue.rear()
            print(f"Mahasiswa di belakang jalur reguler: {rear_student}.")
        else:
            print("Antrian kosong.")

    def check_queue_status(self):
        total_students = self.regular_queue.size() + self.achievement_queue.size()
        print(f"Jumlah mahasiswa dalam antrian: {total_students} (Reguler: {self.regular_queue.size()}, Berprestasi: {self.achievement_queue.size()})")

# Contoh penggunaan
certificate_queue = CertificateQueue()

# Menambahkan mahasiswa
certificate_queue.add_student("T74", has_achievements=False)
certificate_queue.add_student("T75", has_achievements=False)
certificate_queue.add_student("T76", has_achievements=True)  # Mahasiswa berprestasi
certificate_queue.add_student("T77", has_achievements=False)
certificate_queue.add_student("T78", has_achievements=False)
certificate_queue.add_student("T79", has_achievements=False)
certificate_queue.add_student("T80", has_achievements=False)
certificate_queue.add_student("T81", has_achievements=False)
certificate_queue.add_student("T82", has_achievements=False)
certificate_queue.add_student("T83", has_achievements=False)
certificate_queue.add_student("T84", has_achievements=False)
certificate_queue.add_student("T85", has_achievements=False)
certificate_queue.add_student("T86", has_achievements=False)
certificate_queue.add_student("T87", has_achievements=False)
certificate_queue.add_student("T88", has_achievements=False)
certificate_queue.add_student("T89", has_achievements=False)
certificate_queue.add_student("T90", has_achievements=False)
certificate_queue.add_student("T91", has_achievements=False)
certificate_queue.add_student("T92", has_achievements=False)
certificate_queue.add_student("T93", has_achievements=False)
certificate_queue.add_student("T94", has_achievements=False)  # Antrian penuh

