# -*- coding: utf-8 -*-
"""DATA STRUCTURE V.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Th1cNjebl7QEp6kvQ0Pt4IGih91ERPKH
"""

def linear_search(arr, target):
  for i in range (len(arr)):
    if arr[i] == target:
      return i
  return -1

# Gantilah dengan angka acak dan npm anda
arr = [12, 45, 78, 23, 56, 34, 67, 90, 11, 74,]
target = int(input('Masukkan 3 digit terakhir NPM Anda: '))

result = linear_search(arr, target)

if result != -1:
  print(f"Elemen ditemukan pada indeks {result}")
else:
  print("Elemen tidak ditemukan")

def binary_search(arr, target):
  low = 0
  high = len(arr) - 1

  while low <= high:
    mid = (low + high) // 2
    if arr[mid] == target:
      return mid
    elif arr[mid] < target:
      low = mid + 1
    else:
      high = mid - 1

  return -1

# Gantilah dengan angka terutut dan tanggal lahir anda (DDMM)
arr = [1010,1011, 1202, 1405, 1707, 2412, 2508, 3009, 3011]
target = int(input("Masukkan tanggal lahir anda (DDMM): "))

result = binary_search(arr,target)

if result != -1:
  print(f"Elemen ditemukan pada indeks {result}")
else:
  print("Elemen tidak ditemukan")

import math

def jump_search(arr, target):
  n = len(arr)
  step = int(math.sqrt(n))
  prev = 0

  while arr[min(step, n) -1] < target:
    prev = step
    step += int(math.sqrt(n))
    if prev >= n:
      return -1

  for i in range(prev, min(step, n)):
    if arr[i] == target:
      return i
  return -1

# Gantilah dengan daftar nama teman-teman anda dalam urutan alfabet
arr =["A","B","C","D","Ervira","F","G","Hakim","I","J"]
target = input("Masukkan nama teman anda: ")

result = jump_search(arr, target)

if result != -1:
  print(f"Elemen ditemukan pada indeks {result}")
else:
  print("Elemen tidak ditemukan")

"""# **TUGAS**"""

import random

def linear_search(arr, target):
  counter = -1
  for i in range (len(arr)):
    counter += 1
    if arr[i] == target:
      return i, counter
  return -1,counter

arr = random.sample(range(1,1001),10)
print(f"Array yang dihasilkan: {arr}")
target = random.choice(arr)
print(f"Target yang dicari: {target}")

result, comparisons = linear_search(arr, target)

if result != -1:
  print(f"Elemen ditemukan pada indeks {result}, Jumlah perbandingan {comparisons}")
else:
  print(f"Elemen tidak ditemukan, Jumlah perbandingan {comparisons}")

import random

def linear_search(arr, target):
    comparison_count = 0  # Counter untuk menghitung jumlah perbandingan
    for i in range(len(arr)):
        comparison_count += 1  # Increment perbandingan
        if arr[i] == target:
            return i, comparison_count
    return -1, comparison_count

arr = sorted(random.sample(range(1, 1001), 10))
print(f"Array yang ditemukan: {arr}")
target = random.choice(arr)
print(f"Target yang dicari: {target}")

# Melakukan pencarian dengan Linear Search
linear_result = linear_search(arr, target)
if linear_result[0] != -1:
  print(f"Linear Search: Elemen ditemukan pada indeks {linear_result[0]}")
else:
  print("Linear Search: Elemen tidak ditemukan")
print(f"Jumlah perbandingan (Linear Search): {linear_result[1]}")

"""Binary search"""

import random

def binary_search(arr, target):
  low = 0
  high = len(arr) - 1
  loop = 0

  while low <= high:
    mid = (low + high) // 2
    if arr[mid] == target:
      return mid
    elif arr[mid] < target:
      low = mid + 1
    else:
      high = mid - 1
      loop += 1
      print(f"Loop ke-{loop}: low={arr[low]}, mid={arr[mid]}, high={arr[high]} ")

  return -1

arr = sorted(random.sample(range(1, 1001),10))
print(f"Array yang dihasilkan: {arr}")
target = random.choice(arr)
print(f'Target yang dicari: {target}')

result = binary_search(arr,target)

if result != -1:
  print(f"Elemen ditemukan pada indeks {result}")
else:
  print("Elemen tidak ditemukan")

import random

def binary_search(arr, target):
    low = 0
    high = len(arr) - 1
    counter = 0  # Inisialisasi penghitung perbandingan

    while low <= high:
        mid = (low + high) // 2
        counter += 1  # Tambah penghitung setiap kali ada perbandingan

        print(f"Perbandingan ke-{counter} â†’ Low={arr[low]}, Middle={arr[mid]}, High={arr[high]}, Target={target}")

        if arr[mid] == target:
            return mid, counter  # Kembalikan indeks dan penghitung
        elif arr[mid] < target:
            low = mid + 1  # Pencarian dilanjutkan ke kanan
        else:
            high = mid - 1  # Pencarian dilanjutkan ke kiri

    return -1, counter  # Kembalikan -1 dan penghitung jika tidak ditemukan

# Menghasilkan array acak dan mengurutkannya
arr = sorted(random.sample(range(1, 1001), 10))
print(f"Array yang dihasilkan: {arr}")
target = random.choice(arr)
print(f'Target yang dicari : {target}')

result, comparisons = binary_search(arr, target)

if result != -1:
    print(f"Elemen ditemukan pada indeks {result}. Jumlah perbandingan: {comparisons}")
else:
    print(f"Elemen tidak ditemukan. Jumlah perbandingan: {comparisons}")

import random

def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    comparison_count = 0  # Counter untuk menghitung jumlah perbandingan

    while left <= right:
        mid = left + (right - left) // 2
        comparison_count += 1  # Increment perbandingan
        if arr[mid] == target:
            return mid, comparison_count
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return -1, comparison_count

arr = sorted(random.sample(range(1, 1001), 10))
print(f"Array yang ditemukan: {arr}")
target = random.choice(arr)

print(f"Target yang dicari: {target}")
if binary_result[0] != -1:
  print(f"Binary Search: Elemen ditemukan pada indeks {binary_result[0]}")
else:
  print("Binary Search: Elemen tidak ditemukan")
print(f"Jumlah perbandingan (Binary Search): {binary_result[1]}")

"""Jump search"""

import math
import random

def jump_search(arr, target):
    n = len(arr)
    step = int(math.sqrt(n))
    prev = 0
    comparison_count = 0

    while arr[min(step, n) - 1] < target:
        prev = step
        step += int(math.sqrt(n))
        comparison_count += 1
        if prev >= n:
            return -1, comparison_count

    for i in range(prev, min(step, n)):
        comparison_count += 1
        if arr[i] == target:
            return i, comparison_count
    return -1, comparison_count

arr = sorted(random.sample(range(1, 1001),10))
print(f"Array yang ditemukan {arr}")
target = random.choice(arr)
print(f"Target yang dicari: {target}")

result = jump_search(arr, target)
jump_result, jump_comparisons = jump_search(arr, target)

if result != -1:
   print(f"Elemen ditemukan pada indeks {jump_result} dengan {jump_comparisons} perbandingan.")
else:
    print(f"Elemen tidak ditemukan setelah {jump_comparisons} perbandingan.")

import math
import random

def jump_search(arr, target):
    n = len(arr)
    step = int(math.sqrt(n))
    prev = 0
    comparison_count = 0  # Counter untuk menghitung jumlah perbandingan

    # Loop untuk mencari blok yang mungkin mengandung target
    while arr[min(step, n) - 1] < target:
        prev = step
        step += int(math.sqrt(n))
        comparison_count += 1  # Increment perbandingan untuk kondisi while
        if prev >= n:
            return -1, comparison_count

    # Loop untuk mencari elemen dalam blok yang ditemukan
    for i in range(prev, min(step, n)):
        comparison_count += 1  # Increment perbandingan untuk kondisi if
        if arr[i] == target:
            return i, comparison_count

    return -1, comparison_count

# Membuat array acak dan mencari target
arr = sorted(random.sample(range(1, 1001), 10))
print(f"Array yang ditemukan: {arr}")
target = random.choice(arr)
print(f"Target yang dicari: {target}")

result = jump_search(arr, target)

if result[0] != -1:
    print(f"Elemen ditemukan pada indeks {result[0]}")
else:
    print("Elemen tidak ditemukan")

print(f"Jumlah perbandingan: {result[1]}")

"""3 Search

"""

import math
import random

def linear_search(arr, target):
    counter = 0  # Inisialisasi penghitung perbandingan
    for i in range(len(arr)):
        counter += 1  # Tambah penghitung setiap kali ada perbandingan
        if arr[i] == target:
            return i, counter  # Kembalikan indeks dan penghitung
    return -1, counter  # Kembalikan -1 dan penghitung jika tidak ditemukan

def jump_search(arr, target):
    n = len(arr)
    step = int(math.sqrt(n))
    prev = 0
    counter = 0  # Inisialisasi penghitung perbandingan

    # Mencari rentang yang mungkin mengandung target
    while arr[min(step, n) - 1] < target:
        prev = step
        step += int(math.sqrt(n))
        counter += 1  # Tambah penghitung untuk perbandingan ini
        if prev >= n:
            return -1, counter  # Jika prev melebihi n, target tidak ditemukan

    # Melakukan pencarian linear dalam blok yang ditemukan
    for i in range(prev, min(step, n)):
        counter += 1  # Tambah penghitung setiap kali ada perbandingan
        if arr[i] == target:
            return i, counter  # Kembalikan indeks dan penghitung

    return -1, counter  # Kembalikan -1 dan penghitung jika tidak ditemukan

# Menghasilkan array acak dan mengurutkannya
arr = sorted(random.sample(range(1, 1001), 10))
print(f"Array yang ditemukan: {arr}")
target = int(input("Masukkan angka yang ingin dicari: "))

result, comparisons = jump_search(arr, target)

if result != -1:
    print(f"Elemen ditemukan pada indeks {result}. Jumlah perbandingan: {comparisons}")
else:
    print(f"Elemen tidak ditemukan. Jumlah perbandingan: {comparisons}")

import math
import random

def linear_search(arr, target):
    comparison_count = 0  # Counter untuk menghitung jumlah perbandingan
    for i in range(len(arr)):
        comparison_count += 1  # Increment perbandingan
        if arr[i] == target:
            return i, comparison_count
    return -1, comparison_count

def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    comparison_count = 0  # Counter untuk menghitung jumlah perbandingan

    while left <= right:
        mid = left + (right - left) // 2
        comparison_count += 1  # Increment perbandingan
        if arr[mid] == target:
            return mid, comparison_count
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return -1, comparison_count

def jump_search(arr, target):
    n = len(arr)
    step = int(math.sqrt(n))
    prev = 0
    comparison_count = 0  # Counter untuk menghitung jumlah perbandingan

    # Loop untuk mencari blok yang mungkin mengandung target
    while arr[min(step, n) - 1] < target:
        prev = step
        step += int(math.sqrt(n))
        comparison_count += 1  # Increment perbandingan untuk kondisi while
        if prev >= n:
            return -1, comparison_count

    # Loop untuk mencari elemen dalam blok yang ditemukan
    for i in range(prev, min(step, n)):
        comparison_count += 1  # Increment perbandingan untuk kondisi if
        if arr[i] == target:
            return i, comparison_count

    return -1, comparison_count

# Membuat array acak dan mencari target
arr = sorted(random.sample(range(1, 1001), 10))
print(f"Array yang ditemukan: {arr}")
target = random.choice(arr)
print(f"Target yang dicari: {target}")

# Melakukan pencarian dengan Linear Search
linear_result = linear_search(arr, target)
if linear_result[0] != -1:
    print(f"Linear Search: Elemen ditemukan pada indeks {linear_result[0]}")
else:
    print("Linear Search: Elemen tidak ditemukan")
print(f"Jumlah perbandingan (Linear Search): {linear_result[1]}")

# Melakukan pencarian dengan Binary Search
binary_result = binary_search(arr, target)
if binary_result[0] != -1:
    print(f"Binary Search: Elemen ditemukan pada indeks {binary_result[0]}")
else:
    print("Binary Search: Elemen tidak ditemukan")
print(f"Jumlah perbandingan (Binary Search): {binary_result[1]}")

# Melakukan pencarian dengan Jump Search
jump_result = jump_search(arr, target)
if jump_result[0] != -1:
    print(f"Jump Search: Elemen ditemukan pada indeks {jump_result[0]}")
else:
    print("Jump Search: Elemen tidak ditemukan")
print(f"Jumlah perbandingan (Jump Search): {jump_result[1]}")

import math
import random

# Implementasi Linear Search
def linear_search(arr, target):
    comparison_count = 0
    for i in range(len(arr)):
        comparison_count += 1
        if arr[i] == target:
            return i, comparison_count
    return -1, comparison_count

# Implementasi Binary Search
def binary_search(arr, target):
    low = 0
    high = len(arr) - 1
    comparison_count = 0

    while low <= high:
        mid = (low + high) // 2
        comparison_count += 1

        if arr[mid] == target:
            return mid, comparison_count
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1

    return -1, comparison_count

# Implementasi Jump Search
def jump_search(arr, target):
    n = len(arr)
    step = int(math.sqrt(n))
    prev = 0
    comparison_count = 0

    while arr[min(step, n) - 1] < target:
        prev = step
        step += int(math.sqrt(n))
        comparison_count += 1
        if prev >= n:
            return -1, comparison_count

    for i in range(prev, min(step, n)):
        comparison_count += 1
        if arr[i] == target:
            return i, comparison_count
    return -1, comparison_count


# Buat daftar berisi 100 angka acak dalam rentang 1-1000
arr = sorted(random.sample(range(1, 1001), 100))
print(f"Array yang ditemukan: {arr}")

# Tentukan angka target yang akan dicari
target = random.choice(arr)
print(f"Target yang dicari: {target}")

# Mencari menggunakan setiap metode
linear_result, linear_comparisons = linear_search(arr, target)
binary_result, binary_comparisons = binary_search(arr, target)
jump_result, jump_comparisons = jump_search(arr, target)

# Tampilkan hasil
if linear_result != -1:
    print(f"Linear Search: Elemen ditemukan pada indeks {linear_result} dengan {linear_comparisons} perbandingan.")
else:
    print(f"Linear Search: Elemen tidak ditemukan setelah {linear_comparisons} perbandingan.")

if binary_result != -1:
    print(f"Binary Search: Elemen ditemukan pada indeks {binary_result} dengan {binary_comparisons} perbandingan.")
else:
    print(f"Binary Search: Elemen tidak ditemukan setelah {binary_comparisons} perbandingan.")

if jump_result != -1:
    print(f"Jump Search: Elemen ditemukan pada indeks {jump_result} dengan {jump_comparisons} perbandingan.")
else:
    print(f"Jump Search: Elemen tidak ditemukan setelah {jump_comparisons} perbandingan.")

import math
import random

def jump_search(arr, target):
    n = len(arr)
    step = int(math.sqrt(n))
    prev = 0
    comparison_count = 0  # Counter untuk menghitung jumlah perbandingan

    # Loop untuk mencari blok yang mungkin mengandung target
    while arr[min(step, n) - 1] < target:
        prev = step
        step += int(math.sqrt(n))
        comparison_count += 1  # Increment perbandingan untuk kondisi while
        if prev >= n:
            return -1, comparison_count

    # Loop untuk mencari elemen dalam blok yang ditemukan
    for i in range(prev, min(step, n)):
        comparison_count += 1  # Increment perbandingan untuk kondisi if
        if arr[i] == target:
            return i, comparison_count

    return -1, comparison_count

arr = sorted(random.sample(range(1, 1001), 10))
print(f"Array yang ditemukan: {arr}")
target = random.choice(arr)

print(f"Target yang dicari: {target}")
jump_result = jump_search(arr, target)
if jump_result[0] != -1:
  print(f"Jump Search: Elemen ditemukan pada indeks {jump_result[0]}")
else:
  print("Jump Search: Elemen tidak ditemukan")
print(f"Jumlah perbandingan (Jump Search): {jump_result[1]}")

import math
import random

def linear_search(arr, target):
    comparison_count = 0  # Counter untuk menghitung jumlah perbandingan
    for i in range(len(arr)):
        comparison_count += 1  # Increment perbandingan
        if arr[i] == target:
            return i, comparison_count
    return -1, comparison_count

def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    comparison_count = 0  # Counter untuk menghitung jumlah perbandingan

    while left <= right:
        mid = left + (right - left) // 2
        comparison_count += 1  # Increment perbandingan
        if arr[mid] == target:
            return mid, comparison_count
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return -1, comparison_count

def jump_search(arr, target):
    n = len(arr)
    step = int(math.sqrt(n))
    prev = 0
    comparison_count = 0  # Counter untuk menghitung jumlah perbandingan

    # Loop untuk mencari blok yang mungkin mengandung target
    while arr[min(step, n) - 1] < target:
        prev = step
        step += int(math.sqrt(n))
        comparison_count += 1  # Increment perbandingan untuk kondisi while
        if prev >= n:
            return -1, comparison_count

    # Loop untuk mencari elemen dalam blok yang ditemukan
    for i in range(prev, min(step, n)):
        comparison_count += 1  # Increment perbandingan untuk kondisi if
        if arr[i] == target:
            return i, comparison_count

    return -1, comparison_count

# Fungsi utama untuk menjalankan pencarian
def main():
    # Membuat array acak dan mencari target
    arr = sorted(random.sample(range(1, 1001), 10))
    print(f"Array yang ditemukan: {arr}")
    target = random.choice(arr)
    print(f"Target yang dicari: {target}")

    # Melakukan pencarian dengan Linear Search
    linear_result = linear_search(arr, target)
    if linear_result[0] != -1:
        print(f"Linear Search: Elemen ditemukan pada indeks {linear_result[0]}")
    else:
        print("Linear Search: Elemen tidak ditemukan")
    print(f"Jumlah perbandingan (Linear Search): {linear_result[1]}")

    # Melakukan pencarian dengan Binary Search
    binary_result = binary_search(arr, target)
    if binary_result[0] != -1:
        print(f"Binary Search: Elemen ditemukan pada indeks {binary_result[0]}")
    else:
        print("Binary Search: Elemen tidak ditemukan")
    print(f"Jumlah perbandingan (Binary Search): {binary_result[1]}")

    # Melakukan pencarian dengan Jump Search
    jump_result = jump_search(arr, target)
    if jump_result[0] != -1:
        print(f"Jump Search: Elemen ditemukan pada indeks {jump_result[0]}")
    else:
        print("Jump Search: Elemen tidak ditemukan")
    print(f"Jumlah perbandingan (Jump Search): {jump_result[1]}")

if __name__ == "__main__":
    main()

