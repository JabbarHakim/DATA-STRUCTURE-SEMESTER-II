# -*- coding: utf-8 -*-
"""DATA STRUCTURE VI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qwjhnofqGbV3Yb81OJ2SohMsX0IgYDsq
"""

def bubble_sort(arr):
  n = len(arr)
  for i in range (n -1):
    for j in range (n - i - 1):
      if arr[j] > arr[j + 1]:
        arr[j], arr[j + 1] = arr[j + 1], arr[j]

  return arr

# contoh pengunaan
data = [64, 34, 25, 12, 22, 11,90]
sorted_data = bubble_sort(data.copy())
print("Data sebelum sorting: ", data)
print("Data setelah sorting: ", sorted_data)

def selection_sort(arr):
  n = len(arr)
  for i in range (n - 1):
    min_index = i
    for j in range (i + 1, n):
      if arr[j] < arr[min_index]:
        min_index = j
    arr[i], arr[min_index] = arr[min_index], arr[i]
  return arr

data =[64, 25, 12, 11]
sorted_data = selection_sort(data.copy())
print("Data sebelum sorting: ", data)
print("Data setelah sorting: ", sorted_data)

def insertion_sort(arr):
  n = len(arr)
  for i in range (1, n):
    key = arr[i]
    j = i - 1
    while j >= 0 and arr[j] > key:
      arr[j + 1] = arr[j]
      j -= 1
    arr[j + 1] = key
  return arr

data = [64, 34, 25, 12, 22, 11, 90]
sorted_data = insertion_sort(data.copy())
print("Data sebelum sorting: ", data)
print("Data setelah sorting: ", sorted_data)

def merge_sort(arr):
  if len(arr) > 1:
    mid = len(arr) // 2
    left_half = arr[:mid]
    right_half = arr[mid:]

    merge_sort(left_half)
    merge_sort(right_half)

    i = j = k = 0

    while i < len(left_half) and j < len(right_half):
      if left_half[i] < right_half[j]:
        arr[k] = left_half[i]
        i += 1
      else:
        arr[k] = right_half[j]
        j += 1

      while i < len(left_half):
        arr[k] = left_half[i]
        i += 1
        k += 1

      while j < len(right_half):
        arr[k] = right_half[j]
        j += 1
        k += 1

  return arr

data = [64, 25, 12, 22, 11]
sorted_data = merge_sort(data.copy())
print("Data sebelum sorting: ", data)
print("Data setelah sorting: ", sorted_data)

def quick_sort(arr):
  if len(arr) <= 1:
    return arr

  pivot = arr[len(arr) // 2]
  left = [x for x in arr if x < pivot]
  middle = [x for x in arr if x == pivot]
  right = [x for x in arr if x > pivot]

  return quick_sort(left) + middle + quick_sort(right)

data = [64, 25, 12, 22, 11]
sorted_data = quick_sort(data.copy())
print("Data sebelum sorting: ", data)
print("Data setelah sorting: ", sorted_data)

"""# ***TUGAS***"""

# Definisikan kelas untuk Film
class Film:
    def __init__(self, judul, rating):
        self.judul = judul
        self.rating = rating

    def __repr__(self):
        return f"{self.judul} (Rating: {self.rating})"

# Fungsi untuk mengurutkan daftar film menggunakan Bubble Sort
def bubble_sort(films):
    n = len(films)
    for i in range(n):
        for j in range(0, n-i-1):
            if films[j].rating < films[j+1].rating:  # Urutkan dari rating tertinggi
                films[j], films[j+1] = films[j+1], films[j]

# Daftar film yang akan diurutkan
daftar_film = [
    Film("Film Ultraman", 8.5),
    Film("Film Kamen Rider", 9.0),
    Film("Film Boruto", 7.5),
    Film("Film One Piece", 8.0),
    Film("Film Bleach", 9.5)
]

while True:
  print("/nMenu")
  print("1. Daftar Film")
  print("2. Daftar Film Rating Tertinggi")
  print("3. Daftar Film Rating Terendah")
  print("4. Keluar")
  pilihan = input("Pilih menu (1/2/3/4): ")

  if pilihan == "1":
    print("\nDaftar Film:")
    for film in daftar_film:
      print(film)

  elif pilihan == "2":
    bubble_sort(daftar_film)
    print("\nDaftar Film Rating Tertinggi:")
    for film in daftar_film:
      print(film)

  elif pilihan == "3":
    bubble_sort(daftar_film)
    print("\nDaftar Film Rating Terendah:")
    for film in reversed(daftar_film):
      print(film)

  elif pilihan == "4":
    print("Terima Kasih")
    break

  else:
    print("Pilih Antara 1 - 4 !!!")