# -*- coding: utf-8 -*-
"""DATA STRUCTURE III.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19NUwZTd_tmv40xoHUer9K8UrAfRgD4aZ

***LATIHAN 1***
"""

class Kalkulator:
    def __init__(self):
        self.stack = []
        self.current_value = 0

    def add(self, value):
        self.current_value += value
        self.stack.append(f"add {value}")
        print(f"Current Value: {self.current_value}")

    def subtract(self, value):
        self.current_value -= value
        self.stack.append(f"subtract {value}")
        print(f"Current Value: {self.current_value}")

    def multiply(self, value):
        self.current_value *= value
        self.stack.append(f"multiply {value}")
        print(f"Current Value: {self.current_value}")

    def divide(self, value):
        if value != 0:
            self.current_value /= value
            self.stack.append(f"divide {value}")
            print(f"Current Value: {self.current_value}")
        else:
            print("Error: Division by zero")

    def undo(self):
        if not self.stack:
            print("No operations to undo.")
            return

        last_operation = self.stack.pop()
        operation, value = last_operation.split()
        value = float(value)

        if operation == "add":
            self.current_value -= value
        elif operation == "subtract":
            self.current_value += value
        elif operation == "multiply":
            self.current_value /= value
        elif operation == "divide":
            self.current_value *= value

        print(f"Undo: {last_operation}")
        print(f"Current Value: {self.current_value}")

def main():
    calc = Kalkulator()

    while True:
        print("\nMenu:")
        print("1. Menambah Angka")
        print("2. Pengurangan")
        print("3. Perkalian")
        print("4. Pembagian")
        print("5. Undo")
        print("6. Exit")

        choice = input("Choose an option (1-6): ")

        if choice in ['1', '2', '3', '4']:
            value = float(input("Enter a number: "))
            if choice == '1':
                calc.add(value)
            elif choice == '2':
                calc.subtract(value)
            elif choice == '3':
                calc.multiply(value)
            elif choice == '4':
                calc.divide(value)
        elif choice == '5':
            calc.undo()
        elif choice == '6':
            print("Exiting the program.")
            break
        else:
            print("Invalid choice. Please select a valid option.")

if __name__ == "__main__":
    main()

class NavigationHistory:
    def __init__(self):
        self.history_stack = []
        self.current_index = -1
        self.features = ["League of Legends", "WhatsApp", "Twitter"]

    def visit(self, feature):
        if feature in self.features:
            self.history_stack = self.history_stack[:self.current_index + 1]  # Hapus forward history
            self.history_stack.append(feature)
            self.current_index += 1
            print(f"Visited: {feature}")
        else:
            print(f"Feature '{feature}' not found.")
        print(f"Current History: {self.history_stack}")

    def back(self):
        if self.current_index > 0:
            self.current_index -= 1
            last_feature = self.history_stack[self.current_index]
            print(f"Back to: {last_feature}")
        else:
            print("No history to go back to.")
        print(f"Current History: {self.history_stack}")

    def next(self):
        if self.current_index < len(self.history_stack) - 1:
            self.current_index += 1
            next_feature = self.history_stack[self.current_index]
            print(f"Next: {next_feature}")
        else:
            print("No next feature to go to.")
        print(f"Current History: {self.history_stack}")

    def stop(self):
        if self.history_stack:
            print(f"Stopped at: {self.history_stack[self.current_index]}")
        else:
            print("No features visited yet.")

    def current(self):
        if self.current_index >= 0:
            print(f"Current Feature: {self.history_stack[self.current_index]}")
        else:
            print("No features visited yet.")

def main():
    nav_history = NavigationHistory()

    while True:
        print("\nWelcome To N74 Navigasi History Aplikasi Mobile!!")
        print("\n1. Visit Feature (League of Legends, WhatsApp, Twitter)")
        print("2. Back")
        print("3. Next")
        print("4. Stop")
        print("5. Current Feature")
        print("6. Exit")

        choice = input("Choose an option (1-6): ")

        if choice == '1':
            feature = input("Enter feature to visit (League of Legends, WhatsApp, Twitter): ")
            nav_history.visit(feature)
        elif choice == '2':
            nav_history.back()
        elif choice == '3':
            nav_history.next()
        elif choice == '4':
            nav_history.stop()
        elif choice == '5':
            nav_history.current()
        elif choice == '6':
            print("Exiting the program.")
            break
        else:
            print("Invalid choice. Please select a valid option.")

if __name__ == "__main__":
    main()

class EmailDrafts:
    def __init__(self):
        self.draft_stack = []

    def save_draft(self, subject, body):
        draft = {"subject": subject, "body": body}
        self.draft_stack.append(draft)
        print(f"Draft saved: {subject}")

    def view_last_draft(self):
        if not self.draft_stack:
            print("No drafts available.")
            return
        last_draft = self.draft_stack[-1]
        print("Last Draft:")
        print(f"Subject: {last_draft['subject']}")
        print(f"Body: {last_draft['body']}")

    def view_all_drafts(self):
        if not self.draft_stack:
            print("No drafts available.")
            return
        print("All Drafts:")
        for i, draft in enumerate(self.draft_stack, start=1):
            print(f"{i}. Subject: {draft['subject']}")
            print(f"   Body: {draft['body']}")
            print()

    def delete_last_draft(self):
        if not self.draft_stack:
            print("No drafts to delete.")
            return
        deleted_draft = self.draft_stack.pop()
        print(f"Deleted draft: {deleted_draft['subject']}")

def main():
    email_drafts = EmailDrafts()

    # Menyimpan beberapa draft email
    email_drafts.save_draft("JA74", "JA74")
    email_drafts.save_draft("JA74", "JA74")
    email_drafts.save_draft("JA74", "JA74")

    while True:
        print("\nMenu:")
        print("1. View Last Draft")
        print("2. View All Drafts")
        print("3. Delete Last Draft")
        print("4. Exit")

        choice = input("Choose an option (1-4): ")

        if choice == '1':
            email_drafts.view_last_draft()
        elif choice == '2':
            email_drafts.view_all_drafts()
        elif choice == '3':
            email_drafts.delete_last_draft()
        elif choice == '4':
            print("Exiting the program.")
            break
        else:
            print("Invalid choice. Please select a valid option.")

if __name__ == "__main__":
    main()

class TiketBioskop:
    def __init__(self):
        self.films = ["3", "2", "1"]
        self.seats = {f"{row}{col}": None for row in "ABCDE" for col in range(1, 6)}  # 5 rows (A-E) and 5 columns (1-5)
        self.booked_seats = {}

    def list_films(self):
        print("Daftar Film Bioskop:")
        for i, film in enumerate(self.films, start=1):
            print(f"{i}. {film}")

    def book_ticket(self, film, seat):
        if seat not in self.seats:
            print("Kursi tidak valid.")
            return
        if self.seats[seat] is not None:
            print("Kursi sudah dipesan.")
            return

        self.seats[seat] = film
        self.booked_seats[seat] = film
        print(f"Tiket untuk '{film}' berhasil dipesan. No Kursi: {seat}")

    def change_seat(self, old_seat, new_seat):
        if old_seat not in self.booked_seats:
            print("Kursi lama tidak ditemukan.")
            return
        if new_seat not in self.seats:
            print("Kursi baru tidak valid.")
            return
        if self.seats[new_seat] is not None:
            print("Kursi baru sudah dipesan.")
            return

        film = self.booked_seats.pop(old_seat)
        self.seats[old_seat] = None  # Kosongkan kursi lama
        self.seats[new_seat] = film  # Pesan kursi baru
        self.booked_seats[new_seat] = film
        print(f"Kursi berhasil diganti dari {old_seat} ke {new_seat} untuk film '{film}'.")

    def print_booked_tickets(self):
        if not self.booked_seats:
            print("Tidak ada tiket yang sudah dipesan.")
            return
        print("Tiket yang sudah dipesan:")
        for seat, film in self.booked_seats.items():
            print(f"Kursi: {seat}, Film: {film}")

def main():
    bioskop = TiketBioskop()

    while True:
        print("\nMenu:")
        print("1. List Film Bioskop")
        print("2. Pesan Tiket Bioskop dan Mendapatkan No Kursi")
        print("3. Mengganti Kursi")
        print("4. Lihat Tiket yang Sudah Dipesan")
        print("5. Exit")

        choice = input("Pilih opsi (1-5): ")

        if choice == '1':
            bioskop.list_films()
        elif choice == '2':
            film = input("Masukkan nama film yang ingin dipesan: ")
            seat = input("Masukkan nomor kursi (contoh: A1): ")
            bioskop.book_ticket(film, seat)
        elif choice == '3':
            old_seat = input("Masukkan nomor kursi lama yang ingin diganti: ")
            new_seat = input("Masukkan nomor kursi baru: ")
            bioskop.change_seat(old_seat, new_seat)
        elif choice == '4':
            bioskop.print_booked_tickets()
        elif choice == '5':
            print("Keluar dari program.")
            break
        else:
            print("Pilihan tidak valid. Silakan pilih opsi yang benar.")

if __name__ == "__main__":
    main()

class Gudang:
    def __init__(self, npm):
        self.npm = npm
        self.items = []

    def menambah_barang(self, item):
        if len(self.items) < self.npm:
            self.items.append(item)
            print(f"Barang '{item}' berhasil ditambahkan ke gudang.")
        else:
            print("Gudang sudah penuh. Tidak bisa menambahkan barang.")

    def menghapus_barang(self):
        if self.is_empty():
            print("Gudang kosong. Tidak ada barang untuk diambil.")
            return None
        return self.items.pop()

    def is_empty(self):
        return len(self.items) == 0

    def melihat_gudang(self):
        if self.is_empty():
            print("Gudang kosong.")
            return None
        return self.items[-1]

    def display(self):
        if self.is_empty():
            print("Gudang kosong.")
        else:
            print("Barang dalam gudang:")
            for item in reversed(self.items):
                print(f"- {item}")

def main():
    npm = int(input("Masukkan Dua Digit terakhir NPM sebagai jumlah maksimal barang: "))
    gudang = Gudang(npm)

    while True:
        print("\nMenu:")
        print("1. Tambah Barang (Push)")
        print("2. Ambil Barang (Pop)")
        print("3. Lihat Barang Terakhir (Peek)")
        print("4. Tampilkan Semua Barang")
        print("5. Exit")

        choice = input("Pilih opsi (1-5): ")

        if choice == '1':
            item = input("Masukkan nama barang yang ingin ditambahkan: ")
            gudang.menambah_barang(item)
        elif choice == '2':
            item = gudang.menghapus_barang()
            if item:
                print(f"Barang '{item}' berhasil diambil dari gudang.")
        elif choice == '3':
            item = gudang.melihat_gudang()
            if item:
                print(f"Barang terakhir dalam gudang: {item}")
        elif choice == '4':
            gudang.display()
        elif choice == '5':
            print("Keluar dari program.")
            print("Barang yang ada di gudang saat ini:")
            gudang.display()
            break
        else:
            print("Pilihan tidak valid. Silakan pilih opsi yang benar.")

if __name__ == "__main__":
    main()

